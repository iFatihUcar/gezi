-- USERS tablosu
CREATE TABLE USERS (
    USER_ID INT IDENTITY(1,1) PRIMARY KEY,
    USERNAME VARCHAR(50) NOT NULL UNIQUE,
    PASSWORD VARCHAR(255) NOT NULL,
    FULL_NAME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(100),
    USER_TYPE VARCHAR(20) DEFAULT 'TEACHER',
    USER_STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    CREATED_DATE DATETIME DEFAULT GETDATE(),
    LAST_LOGIN_DATE DATETIME
);

-- TRIPS tablosu
CREATE TABLE TRIPS (
    TRIP_ID INT IDENTITY(1,1) PRIMARY KEY,
    TRIP_NAME VARCHAR(100) NOT NULL,
    TRIP_DESCRIPTION TEXT,
    TRIP_DATE DATE NOT NULL,
    TRIP_LOCATION VARCHAR(100) NOT NULL,
    TRIP_COST DECIMAL(10,2) DEFAULT 0,
    TRIP_STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    CREATED_BY INT NOT NULL,
    CREATED_DATE DATETIME DEFAULT GETDATE(),
    UPDATED_BY INT,
    UPDATED_DATE DATETIME,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID),
    FOREIGN KEY (UPDATED_BY) REFERENCES USERS(USER_ID)
);

-- STUDENTS tablosu
CREATE TABLE STUDENTS (
    STUDENT_ID INT IDENTITY(1,1) PRIMARY KEY,
    STUDENT_NAME VARCHAR(50) NOT NULL,
    STUDENT_SURNAME VARCHAR(50) NOT NULL,
    STUDENT_CLASS VARCHAR(20) NOT NULL,
    PARENT_NAME VARCHAR(100) NOT NULL,
    PARENT_PHONE VARCHAR(20) NOT NULL,
    PARENT_EMAIL VARCHAR(100),
    STUDENT_STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    CREATED_BY INT NOT NULL,
    CREATED_DATE DATETIME DEFAULT GETDATE(),
    UPDATED_BY INT,
    UPDATED_DATE DATETIME,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID),
    FOREIGN KEY (UPDATED_BY) REFERENCES USERS(USER_ID)
);

-- TRIP_STUDENTS tablosu
CREATE TABLE TRIP_STUDENTS (
    TRIP_STUDENT_ID INT IDENTITY(1,1) PRIMARY KEY,
    TRIP_ID INT NOT NULL,
    STUDENT_ID INT NOT NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (TRIP_ID) REFERENCES TRIPS(TRIP_ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID),
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID),
    CONSTRAINT UQ_TRIP_STUDENT UNIQUE (TRIP_ID, STUDENT_ID)
);

-- TRIP_APPROVALS tablosu
CREATE TABLE TRIP_APPROVALS (
    APPROVAL_ID INT IDENTITY(1,1) PRIMARY KEY,
    TRIP_ID INT NOT NULL,
    STUDENT_ID INT NOT NULL,
    APPROVAL_STATUS VARCHAR(20) NOT NULL,
    APPROVAL_NOTES TEXT,
    APPROVAL_DATE DATETIME DEFAULT GETDATE(),
    APPROVAL_IP VARCHAR(50),
    FOREIGN KEY (TRIP_ID) REFERENCES TRIPS(TRIP_ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID),
    CONSTRAINT UQ_TRIP_APPROVAL UNIQUE (TRIP_ID, STUDENT_ID)
);

-- APPROVAL_TOKENS tablosu
CREATE TABLE APPROVAL_TOKENS (
    TOKEN_ID INT IDENTITY(1,1) PRIMARY KEY,
    TRIP_ID INT NOT NULL,
    STUDENT_ID INT NOT NULL,
    TOKEN VARCHAR(255) NOT NULL UNIQUE,
    CREATED_BY INT NOT NULL,
    CREATED_DATE DATETIME DEFAULT GETDATE(),
    EXPIRE_DATE DATETIME NOT NULL,
    FOREIGN KEY (TRIP_ID) REFERENCES TRIPS(TRIP_ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID),
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID)
);

-- Admin kullanıcısı ekleme
INSERT INTO USERS (USERNAME, PASSWORD, FULL_NAME, EMAIL, USER_TYPE)
VALUES ('admin', 'admin123', 'Admin Kullanıcı', 'admin@example.com', 'ADMIN');